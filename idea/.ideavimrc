"stractionFreeMode)z"
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
set NERDTree


set ideajoin
set idearefactormode=keep
" set clipboard+=unnamed
" set clipboard+=ideaput

let mapleader=" "

map <C-c> <Esc>

map <leader>t   :NERDTreeToggle<CR>
sethandler <c-j> a:vim
sethandler <c-k> a:vim
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-l> <c-w>l
nnoremap <c-k> <c-w>k

vnoremap <left> <gv
vnoremap <right> >gv
nnoremap ]]     <Action>(MethodUp)
nnoremap [[     <Action>(MethodDown)

nnoremap ; :

" system clipboard
vmap <leader>y "+y
vmap <leader>d "+d
vmap <leader>p "+p
vmap <leader>P "+P
nmap <leader>y "+yy
nmap <leader>p "+p
nmap <leader>P "+P

nnoremap <leader>z <Action>(ToggleDistractionFreeMode)
"nnoremap <leader>h <Action> PreviousTab<CR>
map <leader>h <Action>(PreviousTab)
map <leader>l <Action>(NextTab)
map <leader>q <Action>(CloseContent)
map <leader>qa <Action>(CloseAllEditors)
map <leader>zc <Action>(CollapseAllRegions)
map <leader>zo <Action>(ExpandAllRegions)
map <leader>r <Action>(Refactorings.QuickListPopupAction)
map <leader>= <Action>(ReformatCode)
map <leader>o <Action>(OptimizeImports)
map <leader>u <Action>(FindUsages)
map <leader>c <Action>(CallHierachy)
map <leader><leader> <Action>(Switcher)
map <c-s> <Action>(FileStructurePopup)
map <c-o> <Action>(GotoSymbol)
map gs <Action>(GotoClass)
map gi <Action>(GotoImplementation)
map gd <Action>(GotoDeclaration)
map gp <Action>(GotoSuperMethod)
map gt <Action>(GotoTest)
map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)

